@page "/apartmentform/{Id:int?}"
@inject HttpClient Http
@inject NavigationManager Navigation
@using TenantElectricity.Shared.Models

<h3>@(apartment.Id == 0 ? "Add Apartamentos" : "Editar Apartamentos")</h3>

<!-- Mensaje de feedback -->
<p style="color: green;">@statusMessage</p>

<EditForm Model="@apartment" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Numero de Apartamento:</label>
        <InputText @bind-Value="apartment.ApartmentNumber" />
    </div>
    <div>
        <label>Propietario:</label>
        <InputText @bind-Value="apartment.OwnerName" />
    </div>
    <div>
        <label>Telefono:</label>
        <InputText @bind-Value="apartment.Phone" />
    </div>
    <button type="submit">Guardar</button>
    <button class="cancel" @onclick="Cancel">Cancelar</button>
</EditForm>

@code {
    private Apartment apartment = new();
    private string statusMessage = string.Empty; // Variable para el mensaje

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var response = await Http.GetAsync($"api/apartment/{Id}");
            if (response.IsSuccessStatusCode)
            {
                apartment = await response.Content.ReadFromJsonAsync<Apartment>();
            }
            else
            {
                Navigation.NavigateTo("/apartments");
            }
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (apartment.Id == 0)
            {
                await Http.PostAsJsonAsync("api/apartment", apartment);
                statusMessage = "Apartment added successfully!";
            }
            else
            {
                await Http.PutAsJsonAsync($"api/apartment/{apartment.Id}", apartment);
                statusMessage = "Apartment updated successfully!";
            }

            // Navega de regreso a la lista después de un breve retraso
            await Task.Delay(1500); // Opcional, para que el usuario vea el mensaje
            Navigation.NavigateTo("/apartments");
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/apartments");
    }
}
